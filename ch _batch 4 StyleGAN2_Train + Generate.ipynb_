{"cells":[{"cell_type":"markdown","metadata":{"id":"B8kO1FwNem0a"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"4_s8h-ilzHQc"},"source":["# StyleGAN2\n","\n","This notebook demonstrates how to run NVIDIA's StyleGAN2 on Google Colab.\n","Make sure to specify a GPU runtime.\n","\n","This notebook mainly adds a few convenience functions for training and visualization. \n","\n","For information on StyleGAN2, see:\n","\n","Paper: https://arxiv.org/abs/1812.04948\n","\n","Video: https://youtu.be/kSLJriaOumA\n","\n","Code: https://github.com/NVlabs/stylegan\n","\n","FFHQ: https://github.com/NVlabs/ffhq-dataset\n","\n","/Parth Suresh, 2020 + Mikael Christensen, 2019\n"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7820,"status":"ok","timestamp":1638917026215,"user":{"displayName":"Darya Trubarova","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gix-XlOVn3X94Sne9i_FVz1AA0qerxLRG_iBa-RBQ=s64","userId":"13773985099433224510"},"user_tz":-180},"id":"PzDuIoMcqfBT","outputId":"6e4c7ed1-1b7d-4559-8f5e-166cd0278c1f"},"outputs":[{"name":"stdout","output_type":"stream","text":["TensorFlow 1.x selected.\n","Cloning into 'stylegan2'...\n","remote: Enumerating objects: 138, done.\u001b[K\n","remote: Counting objects: 100% (11/11), done.\u001b[K\n","remote: Compressing objects: 100% (7/7), done.\u001b[K\n","remote: Total 138 (delta 4), reused 10 (delta 4), pack-reused 127\u001b[K\n","Receiving objects: 100% (138/138), 599.47 KiB | 1.02 MiB/s, done.\n","Resolving deltas: 100% (62/62), done.\n","/content/stylegan2\n","CPU says hello.\n","cudaErrorNoKernelImageForDevice: no kernel image is available for execution on the device\n","Tensorflow version: 1.15.2\n","GPU 0: Tesla K80 (UUID: GPU-8f9c3da2-491e-1cea-6681-cb1a2570fb14)\n","GPU Identified at: /device:GPU:0\n"]}],"source":["%tensorflow_version 1.x\n","import tensorflow as tf\n","\n","# Download the code\n","!git clone https://github.com/NVlabs/stylegan2.git\n","%cd stylegan2\n","!nvcc test_nvcc.cu -o test_nvcc -run\n","\n","print('Tensorflow version: {}'.format(tf.__version__) )\n","!nvidia-smi -L\n","print('GPU Identified at: {}'.format(tf.test.gpu_device_name()))"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4976,"status":"ok","timestamp":1638917034091,"user":{"displayName":"Darya Trubarova","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gix-XlOVn3X94Sne9i_FVz1AA0qerxLRG_iBa-RBQ=s64","userId":"13773985099433224510"},"user_tz":-180},"id":"umKaTRK4dlL7","outputId":"78a431db-3916-4db1-d313-87fa85f9bc0f"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content\n","--2021-12-07 22:43:48--  http://d36zk2xti64re0.cloudfront.net/stylegan2/networks/stylegan2-cat-config-f.pkl\n","Resolving d36zk2xti64re0.cloudfront.net (d36zk2xti64re0.cloudfront.net)... 54.192.19.186, 54.192.19.149, 54.192.19.134, ...\n","Connecting to d36zk2xti64re0.cloudfront.net (d36zk2xti64re0.cloudfront.net)|54.192.19.186|:80... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 357418027 (341M) [application/x-www-form-urlencoded]\n","Saving to: ‘stylegan2-cat-config-f.pkl’\n","\n","stylegan2-cat-confi 100%[===================\u003e] 340.86M   106MB/s    in 3.5s    \n","\n","2021-12-07 22:43:53 (98.1 MB/s) - ‘stylegan2-cat-config-f.pkl’ saved [357418027/357418027]\n","\n"]}],"source":["%cd ..\n","#Download trained model\n","!wget http://d36zk2xti64re0.cloudfront.net/stylegan2/networks/stylegan2-cat-config-f.pkl"]},{"cell_type":"markdown","metadata":{"id":"18aVL4ihQ_2X"},"source":["Connecting to our google drive."]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19296,"status":"ok","timestamp":1638917060759,"user":{"displayName":"Darya Trubarova","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gix-XlOVn3X94Sne9i_FVz1AA0qerxLRG_iBa-RBQ=s64","userId":"13773985099433224510"},"user_tz":-180},"id":"TFfqeEYOK1DO","outputId":"a39ffee7-7ad7-4cf7-80ea-741c46109d94"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","metadata":{"id":"BRYsbkw4Yze1"},"source":["## Part 1. Dataset Preparation\n","Now we will check your dataset folder for images in it. In cell below, paste path to your folder on google drive. \n","\n","For example 'dataset-kotiki' instead of 'dataset-tattoes'."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"executionInfo":{"elapsed":2630,"status":"ok","timestamp":1638385420163,"user":{"displayName":"Darya Trubarova","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gix-XlOVn3X94Sne9i_FVz1AA0qerxLRG_iBa-RBQ=s64","userId":"13773985099433224510"},"user_tz":-180},"id":"pWMPNER11Z_A","outputId":"d35116cc-a1b4-41d2-9ab4-9dafc1833787"},"outputs":[{"data":{"text/html":[""],"text/plain":["\u003cIPython.core.display.HTML object\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["import os\n","\n","path = \"/content/drive/MyDrive/datach/\"\n","\n","from fastai.vision import verify_images\n","verify_images(path, delete=True)"]},{"cell_type":"markdown","metadata":{"id":"-qtJVrvAZI6u"},"source":["#### Process images:\n","\n","following cell will crop your images to a square and resize them to 256 resolution.\n","\n","Now all cropped and resized data is stored in folder 'resized'."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5538,"status":"ok","timestamp":1638385426853,"user":{"displayName":"Darya Trubarova","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gix-XlOVn3X94Sne9i_FVz1AA0qerxLRG_iBa-RBQ=s64","userId":"13773985099433224510"},"user_tz":-180},"id":"EBbkV2Fq_CUy","outputId":"9a9c57a9-11bc-4ee4-aea2-45818e0dbd6b"},"outputs":[{"name":"stderr","output_type":"stream","text":["100%|██████████| 202/202 [00:05\u003c00:00, 39.73it/s]\n"]}],"source":["from PIL import Image\n","from tqdm import tqdm\n","\n","!mkdir -p \"/content/drive/MyDrive/StyleGAN2/resized/\"\n","files = os.listdir(path)\n","\n","\n","def resize():\n","    files = os.listdir(path)\n","    for i in tqdm(range(len(files))):\n","      ##if files[i].endswith(\".png\"):\n","##      \tcontinue\n","\n","      if 'DS_Store' in files[i]:\n","        continue\n","      im = Image.open(path + files[i])\n","      imResize = im.resize((256,256), Image.ANTIALIAS)\n","      imResize.save(\"/content/drive/MyDrive/StyleGAN2/resized/\" + files[i] , 'JPEG')\n","\n","resize()\n"]},{"cell_type":"markdown","metadata":{"id":"rp1_Kc98ZpPe"},"source":["And now we will convert them into a proper dataset. This will be written to folder 'datasets/your_dataset'.\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8044,"status":"ok","timestamp":1638385437759,"user":{"displayName":"Darya Trubarova","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gix-XlOVn3X94Sne9i_FVz1AA0qerxLRG_iBa-RBQ=s64","userId":"13773985099433224510"},"user_tz":-180},"id":"8mQczlTg_DP8","outputId":"e96e99cd-8511-4a0e-efda-4380ecae24f6"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/stylegan2\n","Loading images from \"/content/drive/MyDrive/StyleGAN2/resized/\"\n","Creating dataset \"/content/drive/MyDrive/StyleGAN2/datasets/datach\"\n","dataset_tool.py:86: DeprecationWarning: tostring() is deprecated. Use tobytes() instead.\n","  'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[quant.tostring()]))}))\n","Added 202 images.\n"]}],"source":["%cd /content/stylegan2/\n","!python dataset_tool.py create_from_images \"/content/drive/MyDrive/StyleGAN2/datasets/datach\" \"/content/drive/MyDrive/StyleGAN2/resized/\""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FQgjZRxthoyd"},"outputs":[],"source":["!rm -rf /content/drive/MyDrive/StyleGAN2/resized/"]},{"cell_type":"markdown","metadata":{"id":"WdJj6KDQaDUH"},"source":["If no errors appeared above, we will go into training."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":427,"status":"ok","timestamp":1638385445445,"user":{"displayName":"Darya Trubarova","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gix-XlOVn3X94Sne9i_FVz1AA0qerxLRG_iBa-RBQ=s64","userId":"13773985099433224510"},"user_tz":-180},"id":"VdnBhgrwblt3","outputId":"d5cf05db-34da-4888-b9a7-6b5e15c9e59e"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/stylegan2/training\n"]}],"source":["%cd /content/stylegan2/training"]},{"cell_type":"markdown","metadata":{"id":"hIdRVncr81mT"},"source":["## Part 2. Training code"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1638393946662,"user":{"displayName":"Darya Trubarova","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gix-XlOVn3X94Sne9i_FVz1AA0qerxLRG_iBa-RBQ=s64","userId":"13773985099433224510"},"user_tz":-180},"id":"lSVoMnq1jNE-","outputId":"331ec1e6-e274-4697-cef4-618fa290e585"},"outputs":[{"name":"stdout","output_type":"stream","text":["Writing training_loop.py\n"]}],"source":["\n","%%writefile training_loop.py\n","# Copyright (c) 2019, NVIDIA Corporation. All rights reserved.\n","#\n","# This work is made available under the Nvidia Source Code License-NC.\n","# To view a copy of this license, visit\n","# https://nvlabs.github.io/stylegan2/license.html\n","\n","\"\"\"Main training script.\"\"\"\n","\n","import numpy as np\n","import tensorflow as tf\n","import dnnlib\n","import dnnlib.tflib as tflib\n","from dnnlib.tflib.autosummary import autosummary\n","\n","from training import dataset\n","from training import misc\n","from metrics import metric_base\n","\n","#----------------------------------------------------------------------------\n","# Just-in-time processing of training images before feeding them to the networks.\n","\n","def process_reals(x, labels, lod, mirror_augment, drange_data, drange_net):\n","    with tf.name_scope('DynamicRange'):\n","        x = tf.cast(x, tf.float32)\n","        x = misc.adjust_dynamic_range(x, drange_data, drange_net)\n","    if mirror_augment:\n","        with tf.name_scope('MirrorAugment'):\n","            x = tf.where(tf.random_uniform([tf.shape(x)[0]]) \u003c 0.5, x, tf.reverse(x, [3]))\n","    with tf.name_scope('FadeLOD'): # Smooth crossfade between consecutive levels-of-detail.\n","        s = tf.shape(x)\n","        y = tf.reshape(x, [-1, s[1], s[2]//2, 2, s[3]//2, 2])\n","        y = tf.reduce_mean(y, axis=[3, 5], keepdims=True)\n","        y = tf.tile(y, [1, 1, 1, 2, 1, 2])\n","        y = tf.reshape(y, [-1, s[1], s[2], s[3]])\n","        x = tflib.lerp(x, y, lod - tf.floor(lod))\n","    with tf.name_scope('UpscaleLOD'): # Upscale to match the expected input/output size of the networks.\n","        s = tf.shape(x)\n","        factor = tf.cast(2 ** tf.floor(lod), tf.int32)\n","        x = tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])\n","        x = tf.tile(x, [1, 1, 1, factor, 1, factor])\n","        x = tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])\n","    return x, labels\n","\n","#----------------------------------------------------------------------------\n","# Evaluate time-varying training parameters.\n","\n","def training_schedule(\n","    cur_nimg,\n","    training_set,\n","    lod_initial_resolution  = None,     # Image resolution used at the beginning.\n","    lod_training_kimg       = 600,      # Thousands of real images to show before doubling the resolution.\n","    lod_transition_kimg     = 600,      # Thousands of real images to show when fading in new layers.\n","    minibatch_size_base     = 4,       # Global minibatch size.\n","    minibatch_size_dict     = {},       # Resolution-specific overrides.\n","    minibatch_gpu_base      = 4,        # Number of samples processed at a time by one GPU.\n","    minibatch_gpu_dict      = {},       # Resolution-specific overrides.\n","    G_lrate_base            = 0.002,    # Learning rate for the generator.\n","    G_lrate_dict            = {},       # Resolution-specific overrides.\n","    D_lrate_base            = 0.002,    # Learning rate for the discriminator.\n","    D_lrate_dict            = {},       # Resolution-specific overrides.\n","    lrate_rampup_kimg       = 0,        # Duration of learning rate ramp-up.\n","    tick_kimg_base          = 160,        # Default interval of progress snapshots.\n","    tick_kimg_dict          = {8:28, 16:24, 32:20, 64:16, 128:12, 256:8, 512:6, 1024:4}): # Resolution-specific overrides.\n","\n","    # Initialize result dict.\n","    s = dnnlib.EasyDict()\n","    s.kimg = cur_nimg / 1000.0\n","\n","    # Training phase.\n","    phase_dur = lod_training_kimg + lod_transition_kimg\n","    phase_idx = int(np.floor(s.kimg / phase_dur)) if phase_dur \u003e 0 else 0\n","    phase_kimg = s.kimg - phase_idx * phase_dur\n","\n","    # Level-of-detail and resolution.\n","    if lod_initial_resolution is None:\n","        s.lod = 0.0\n","    else:\n","        s.lod = training_set.resolution_log2\n","        s.lod -= np.floor(np.log2(lod_initial_resolution))\n","        s.lod -= phase_idx\n","        if lod_transition_kimg \u003e 0:\n","            s.lod -= max(phase_kimg - lod_training_kimg, 0.0) / lod_transition_kimg\n","        s.lod = max(s.lod, 0.0)\n","    s.resolution = 2 ** (training_set.resolution_log2 - int(np.floor(s.lod)))\n","\n","    # Minibatch size.\n","    s.minibatch_size = minibatch_size_dict.get(s.resolution, minibatch_size_base)\n","    s.minibatch_gpu = minibatch_gpu_dict.get(s.resolution, minibatch_gpu_base)\n","\n","    # Learning rate.\n","    s.G_lrate = G_lrate_dict.get(s.resolution, G_lrate_base)\n","    s.D_lrate = D_lrate_dict.get(s.resolution, D_lrate_base)\n","    if lrate_rampup_kimg \u003e 0:\n","        rampup = min(s.kimg / lrate_rampup_kimg, 1.0)\n","        s.G_lrate *= rampup\n","        s.D_lrate *= rampup\n","\n","    # Other parameters.\n","    s.tick_kimg = tick_kimg_dict.get(s.resolution, tick_kimg_base)\n","    return s\n","\n","#----------------------------------------------------------------------------\n","# Main training script.\n","\n","def training_loop(\n","    G_args                  = {},       # Options for generator network.\n","    D_args                  = {},       # Options for discriminator network.\n","    G_opt_args              = {},       # Options for generator optimizer.\n","    D_opt_args              = {},       # Options for discriminator optimizer.\n","    G_loss_args             = {},       # Options for generator loss.\n","    D_loss_args             = {},       # Options for discriminator loss.\n","    dataset_args            = {},       # Options for dataset.load_dataset().\n","    sched_args              = {},       # Options for train.TrainingSchedule.\n","    grid_args               = {},       # Options for train.setup_snapshot_image_grid().\n","    metric_arg_list         = [],       # Options for MetricGroup.\n","    tf_config               = {},       # Options for tflib.init_tf().\n","    data_dir                = None,     # Directory to load datasets from.\n","    G_smoothing_kimg        = 10.0,     # Half-life of the running average of generator weights.\n","    minibatch_repeats       = 4,        # Number of minibatches to run before adjusting training parameters.\n","    lazy_regularization     = True,     # Perform regularization as a separate training step?\n","    G_reg_interval          = 4,        # How often the perform regularization for G? Ignored if lazy_regularization=False.\n","    D_reg_interval          = 16,       # How often the perform regularization for D? Ignored if lazy_regularization=False.\n","    reset_opt_for_new_lod   = True,     # Reset optimizer internal state (e.g. Adam moments) when new layers are introduced?\n","    total_kimg              = 25000,    # Total length of the training, measured in thousands of real images.\n","    mirror_augment          = False,    # Enable mirror augment?\n","    drange_net              = [-1,1],   # Dynamic range used when feeding image data to the networks.\n","    image_snapshot_ticks    = 1,       # How often to save image snapshots? None = only save 'reals.png' and 'fakes-init.png'.\n","    network_snapshot_ticks  = 1,       # How often to save network snapshots? None = only save 'networks-final.pkl'.\n","    save_tf_graph           = False,    # Include full TensorFlow computation graph in the tfevents file?\n","    save_weight_histograms  = False,    # Include weight histograms in the tfevents file?\n","    resume_pkl              = '',     # Network pickle to resume training from, None = train from scratch.\n","    resume_kimg             = '',      # Assumed training progress at the beginning. Affects reporting and training schedule.\n","    resume_time             = 0.0,      # Assumed wallclock time at the beginning. Affects reporting.\n","    resume_with_new_nets    = False):   # Construct new networks according to G_args and D_args before resuming training?\n","\n","    # Initialize dnnlib and TensorFlow.\n","    tflib.init_tf(tf_config)\n","    num_gpus = dnnlib.submit_config.num_gpus\n","\n","    # Load training set.\n","    training_set = dataset.load_dataset(data_dir=dnnlib.convert_path(data_dir), verbose=True, **dataset_args)\n","    grid_size, grid_reals, grid_labels = misc.setup_snapshot_image_grid(training_set, **grid_args)\n","    misc.save_image_grid(grid_reals, dnnlib.make_run_dir_path('reals.png'), drange=training_set.dynamic_range, grid_size=grid_size)\n","\n","    # Construct or load networks.\n","    with tf.device('/gpu:0'):\n","        if resume_pkl is None or resume_with_new_nets:\n","            print('Constructing networks...')\n","            G = tflib.Network('G', num_channels=training_set.shape[0], resolution=training_set.shape[1], label_size=training_set.label_size, **G_args)\n","            D = tflib.Network('D', num_channels=training_set.shape[0], resolution=training_set.shape[1], label_size=training_set.label_size, **D_args)\n","            Gs = G.clone('Gs')\n","        if resume_pkl is not None:\n","            print('Loading networks from \"%s\"...' % resume_pkl)\n","            rG, rD, rGs = misc.load_pkl(resume_pkl)\n","            if resume_with_new_nets: G.copy_vars_from(rG); D.copy_vars_from(rD); Gs.copy_vars_from(rGs)\n","            else: G = rG; D = rD; Gs = rGs\n","\n","    # Print layers and generate initial image snapshot.\n","    G.print_layers(); D.print_layers()\n","    sched = training_schedule(cur_nimg=total_kimg*1000, training_set=training_set, **sched_args)\n","    grid_latents = np.random.randn(np.prod(grid_size), *G.input_shape[1:])\n","    grid_fakes = Gs.run(grid_latents, grid_labels, is_validation=True, minibatch_size=sched.minibatch_gpu)\n","    misc.save_image_grid(grid_fakes, dnnlib.make_run_dir_path('fakes_init.png'), drange=drange_net, grid_size=grid_size)\n","\n","    # Setup training inputs.\n","    print('Building TensorFlow graph...')\n","    with tf.name_scope('Inputs'), tf.device('/cpu:0'):\n","        lod_in               = tf.placeholder(tf.float32, name='lod_in', shape=[])\n","        lrate_in             = tf.placeholder(tf.float32, name='lrate_in', shape=[])\n","        minibatch_size_in    = tf.placeholder(tf.int32, name='minibatch_size_in', shape=[])\n","        minibatch_gpu_in     = tf.placeholder(tf.int32, name='minibatch_gpu_in', shape=[])\n","        minibatch_multiplier = minibatch_size_in // (minibatch_gpu_in * num_gpus)\n","        Gs_beta              = 0.5 ** tf.div(tf.cast(minibatch_size_in, tf.float32), G_smoothing_kimg * 1000.0) if G_smoothing_kimg \u003e 0.0 else 0.0\n","\n","    # Setup optimizers.\n","    G_opt_args = dict(G_opt_args)\n","    D_opt_args = dict(D_opt_args)\n","    for args, reg_interval in [(G_opt_args, G_reg_interval), (D_opt_args, D_reg_interval)]:\n","        args['minibatch_multiplier'] = minibatch_multiplier\n","        args['learning_rate'] = lrate_in\n","        if lazy_regularization:\n","            mb_ratio = reg_interval / (reg_interval + 1)\n","            args['learning_rate'] *= mb_ratio\n","            if 'beta1' in args: args['beta1'] **= mb_ratio\n","            if 'beta2' in args: args['beta2'] **= mb_ratio\n","    G_opt = tflib.Optimizer(name='TrainG', **G_opt_args)\n","    D_opt = tflib.Optimizer(name='TrainD', **D_opt_args)\n","    G_reg_opt = tflib.Optimizer(name='RegG', share=G_opt, **G_opt_args)\n","    D_reg_opt = tflib.Optimizer(name='RegD', share=D_opt, **D_opt_args)\n","\n","    # Build training graph for each GPU.\n","    data_fetch_ops = []\n","    for gpu in range(num_gpus):\n","        with tf.name_scope('GPU%d' % gpu), tf.device('/gpu:%d' % gpu):\n","\n","            # Create GPU-specific shadow copies of G and D.\n","            G_gpu = G if gpu == 0 else G.clone(G.name + '_shadow')\n","            D_gpu = D if gpu == 0 else D.clone(D.name + '_shadow')\n","\n","            # Fetch training data via temporary variables.\n","            with tf.name_scope('DataFetch'):\n","                sched = training_schedule(cur_nimg=int(resume_kimg*1000), training_set=training_set, **sched_args)\n","                reals_var = tf.Variable(name='reals', trainable=False, initial_value=tf.zeros([sched.minibatch_gpu] + training_set.shape))\n","                labels_var = tf.Variable(name='labels', trainable=False, initial_value=tf.zeros([sched.minibatch_gpu, training_set.label_size]))\n","                reals_write, labels_write = training_set.get_minibatch_tf()\n","                reals_write, labels_write = process_reals(reals_write, labels_write, lod_in, mirror_augment, training_set.dynamic_range, drange_net)\n","                reals_write = tf.concat([reals_write, reals_var[minibatch_gpu_in:]], axis=0)\n","                labels_write = tf.concat([labels_write, labels_var[minibatch_gpu_in:]], axis=0)\n","                data_fetch_ops += [tf.assign(reals_var, reals_write)]\n","                data_fetch_ops += [tf.assign(labels_var, labels_write)]\n","                reals_read = reals_var[:minibatch_gpu_in]\n","                labels_read = labels_var[:minibatch_gpu_in]\n","\n","            # Evaluate loss functions.\n","            lod_assign_ops = []\n","            if 'lod' in G_gpu.vars: lod_assign_ops += [tf.assign(G_gpu.vars['lod'], lod_in)]\n","            if 'lod' in D_gpu.vars: lod_assign_ops += [tf.assign(D_gpu.vars['lod'], lod_in)]\n","            with tf.control_dependencies(lod_assign_ops):\n","                with tf.name_scope('G_loss'):\n","                    G_loss, G_reg = dnnlib.util.call_func_by_name(G=G_gpu, D=D_gpu, opt=G_opt, training_set=training_set, minibatch_size=minibatch_gpu_in, **G_loss_args)\n","                with tf.name_scope('D_loss'):\n","                    D_loss, D_reg = dnnlib.util.call_func_by_name(G=G_gpu, D=D_gpu, opt=D_opt, training_set=training_set, minibatch_size=minibatch_gpu_in, reals=reals_read, labels=labels_read, **D_loss_args)\n","\n","            # Register gradients.\n","            if not lazy_regularization:\n","                if G_reg is not None: G_loss += G_reg\n","                if D_reg is not None: D_loss += D_reg\n","            else:\n","                if G_reg is not None: G_reg_opt.register_gradients(tf.reduce_mean(G_reg * G_reg_interval), G_gpu.trainables)\n","                if D_reg is not None: D_reg_opt.register_gradients(tf.reduce_mean(D_reg * D_reg_interval), D_gpu.trainables)\n","            G_opt.register_gradients(tf.reduce_mean(G_loss), G_gpu.trainables)\n","            D_opt.register_gradients(tf.reduce_mean(D_loss), D_gpu.trainables)\n","\n","    # Setup training ops.\n","    data_fetch_op = tf.group(*data_fetch_ops)\n","    G_train_op = G_opt.apply_updates()\n","    D_train_op = D_opt.apply_updates()\n","    G_reg_op = G_reg_opt.apply_updates(allow_no_op=True)\n","    D_reg_op = D_reg_opt.apply_updates(allow_no_op=True)\n","    Gs_update_op = Gs.setup_as_moving_average_of(G, beta=Gs_beta)\n","\n","    # Finalize graph.\n","    with tf.device('/gpu:0'):\n","        try:\n","            peak_gpu_mem_op = tf.contrib.memory_stats.MaxBytesInUse()\n","        except tf.errors.NotFoundError:\n","            peak_gpu_mem_op = tf.constant(0)\n","    tflib.init_uninitialized_vars()\n","\n","    print('Initializing logs...')\n","    summary_log = tf.summary.FileWriter(dnnlib.make_run_dir_path())\n","    if save_tf_graph:\n","        summary_log.add_graph(tf.get_default_graph())\n","    if save_weight_histograms:\n","        G.setup_weight_histograms(); D.setup_weight_histograms()\n","    metrics = metric_base.MetricGroup(metric_arg_list)\n","\n","    print('Training for %d kimg...\\n' % total_kimg)\n","    dnnlib.RunContext.get().update('', cur_epoch=resume_kimg, max_epoch=total_kimg)\n","    maintenance_time = dnnlib.RunContext.get().get_last_update_interval()\n","    cur_nimg = int(resume_kimg * 1000)\n","    cur_tick = -1\n","    tick_start_nimg = cur_nimg\n","    prev_lod = -1.0\n","    running_mb_counter = 0\n","    while cur_nimg \u003c total_kimg * 1000:\n","        if dnnlib.RunContext.get().should_stop(): break\n","\n","        # Choose training parameters and configure training ops.\n","        sched = training_schedule(cur_nimg=cur_nimg, training_set=training_set, **sched_args)\n","        assert sched.minibatch_size % (sched.minibatch_gpu * num_gpus) == 0\n","        training_set.configure(sched.minibatch_gpu, sched.lod)\n","        if reset_opt_for_new_lod:\n","            if np.floor(sched.lod) != np.floor(prev_lod) or np.ceil(sched.lod) != np.ceil(prev_lod):\n","                G_opt.reset_optimizer_state(); D_opt.reset_optimizer_state()\n","        prev_lod = sched.lod\n","\n","        # Run training ops.\n","        feed_dict = {lod_in: sched.lod, lrate_in: sched.G_lrate, minibatch_size_in: sched.minibatch_size, minibatch_gpu_in: sched.minibatch_gpu}\n","        for _repeat in range(minibatch_repeats):\n","            rounds = range(0, sched.minibatch_size, sched.minibatch_gpu * num_gpus)\n","            run_G_reg = (lazy_regularization and running_mb_counter % G_reg_interval == 0)\n","            run_D_reg = (lazy_regularization and running_mb_counter % D_reg_interval == 0)\n","            cur_nimg += sched.minibatch_size\n","            running_mb_counter += 1\n","\n","            # Fast path without gradient accumulation.\n","            if len(rounds) == 1:\n","                tflib.run([G_train_op, data_fetch_op], feed_dict)\n","                if run_G_reg:\n","                    tflib.run(G_reg_op, feed_dict)\n","                tflib.run([D_train_op, Gs_update_op], feed_dict)\n","                if run_D_reg:\n","                    tflib.run(D_reg_op, feed_dict)\n","\n","            # Slow path with gradient accumulation.\n","            else:\n","                for _round in rounds:\n","                    tflib.run(G_train_op, feed_dict)\n","                if run_G_reg:\n","                    for _round in rounds:\n","                        tflib.run(G_reg_op, feed_dict)\n","                tflib.run(Gs_update_op, feed_dict)\n","                for _round in rounds:\n","                    tflib.run(data_fetch_op, feed_dict)\n","                    tflib.run(D_train_op, feed_dict)\n","                if run_D_reg:\n","                    for _round in rounds:\n","                        tflib.run(D_reg_op, feed_dict)\n","\n","        # Perform maintenance tasks once per tick.\n","        done = (cur_nimg \u003e= total_kimg * 1000)\n","        if cur_tick \u003c 0 or cur_nimg \u003e= tick_start_nimg + sched.tick_kimg * 1000 or done:\n","            cur_tick += 1\n","            tick_kimg = (cur_nimg - tick_start_nimg) / 1000.0\n","            tick_start_nimg = cur_nimg\n","            tick_time = dnnlib.RunContext.get().get_time_since_last_update()\n","            total_time = dnnlib.RunContext.get().get_time_since_start() + resume_time\n","\n","            # Report progress.\n","            print('tick %-5d kimg %-8.1f lod %-5.2f minibatch %-4d time %-12s sec/tick %-7.1f sec/kimg %-7.2f maintenance %-6.1f gpumem %.1f' % (\n","                autosummary('Progress/tick', cur_tick),\n","                autosummary('Progress/kimg', cur_nimg / 1000.0),\n","                autosummary('Progress/lod', sched.lod),\n","                autosummary('Progress/minibatch', sched.minibatch_size),\n","                dnnlib.util.format_time(autosummary('Timing/total_sec', total_time)),\n","                autosummary('Timing/sec_per_tick', tick_time),\n","                autosummary('Timing/sec_per_kimg', tick_time / tick_kimg),\n","                autosummary('Timing/maintenance_sec', maintenance_time),\n","                autosummary('Resources/peak_gpu_mem_gb', peak_gpu_mem_op.eval() / 2**30)))\n","            autosummary('Timing/total_hours', total_time / (60.0 * 60.0))\n","            autosummary('Timing/total_days', total_time / (24.0 * 60.0 * 60.0))\n","\n","            # Save snapshots.\n","            if image_snapshot_ticks is not None and (cur_tick % image_snapshot_ticks == 0 or done):\n","                grid_fakes = Gs.run(grid_latents, grid_labels, is_validation=True, minibatch_size=sched.minibatch_gpu)\n","                misc.save_image_grid(grid_fakes, dnnlib.make_run_dir_path('fakes%06d.png' % (cur_nimg // 1000)), drange=drange_net, grid_size=grid_size)\n","            if network_snapshot_ticks is not None and (cur_tick % network_snapshot_ticks == 0 or done):\n","                pkl = dnnlib.make_run_dir_path('network-snapshot-%06d.pkl' % (cur_nimg // 1000))\n","                misc.save_pkl((G, D, Gs), pkl)\n","                metrics.run(pkl, run_dir=dnnlib.make_run_dir_path(), data_dir=dnnlib.convert_path(data_dir), num_gpus=num_gpus, tf_config=tf_config)\n","\n","            # Update summaries and RunContext.\n","            metrics.update_autosummaries()\n","            tflib.autosummary.save_summaries(summary_log, cur_nimg)\n","            dnnlib.RunContext.get().update('%.2f' % sched.lod, cur_epoch=cur_nimg // 1000, max_epoch=total_kimg)\n","            maintenance_time = dnnlib.RunContext.get().get_last_update_interval() - tick_time\n","\n","    # Save final snapshot.\n","    misc.save_pkl((G, D, Gs), dnnlib.make_run_dir_path('network-final.pkl'))\n","\n","    # All done.\n","    summary_log.close()\n","    training_set.close()\n","\n","#----------------------------------------------------------------------------"]},{"cell_type":"markdown","metadata":{"id":"WUES7ATGIWCI"},"source":["## Part 3. Customize Training Variables"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1638393946663,"user":{"displayName":"Darya Trubarova","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gix-XlOVn3X94Sne9i_FVz1AA0qerxLRG_iBa-RBQ=s64","userId":"13773985099433224510"},"user_tz":-180},"id":"H8qcPk0sPMln","outputId":"475175a6-9529-4a9a-aa5a-9326063b4609"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/stylegan2\n"]}],"source":["%cd /content/stylegan2/\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cW6Qw8EDIT8d"},"outputs":[],"source":["dataset = 'datach'\n","data_dir = '/content/drive/MyDrive/StyleGAN2/datasets/'\n","config_id = 'config-f'\n","num_gpus = 1\n","total_kimg = 100000\n","mirror_augment = True\n","metrics = []\n","gamma = None\n","result_dir = '/content/drive/MyDrive/StyleGAN2/saves/'\n","\n","# если возобновляем обучение\n","resume_pkl = '/content/drive/MyDrive/StyleGAN2/saves/00028-stylegan2-datach-1gpu-config-f/network-snapshot-015008.pkl' # путь к сохраненной модели, например network-snapshot-015016.pkl\n","resume_kimg = 15008 # из названия модели, например для network-snapshot-015016.pkl resume_kimg=15016"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pufC7hNgpA_Y","outputId":"599a6f73-3348-4e99-f940-3809dec8e218"},"outputs":[{"name":"stdout","output_type":"stream","text":["Local submit - run_dir: /content/drive/MyDrive/StyleGAN2/saves/00029-stylegan2-datach-1gpu-config-f\n","dnnlib: Running training.training_loop.training_loop() on localhost...\n","Streaming data using training.dataset.TFRecordDataset...\n","WARNING: Entity \u003cfunction TFRecordDataset.parse_tfrecord_tf at 0x7f9eb1a8f4d0\u003e could not be transformed and will be executed as-is. Please report this to the AutoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: module 'gast' has no attribute 'Index'\n","Dataset shape = [3, 256, 256]\n","Dynamic range = [0, 255]\n","Label size    = 0\n","Loading networks from \"/content/drive/MyDrive/StyleGAN2/saves/00028-stylegan2-datach-1gpu-config-f/network-snapshot-015008.pkl\"...\n","Setting up TensorFlow plugin \"fused_bias_act.cu\": Preprocessing... Compiling... Loading... Done.\n","Setting up TensorFlow plugin \"upfirdn_2d.cu\": Preprocessing... Compiling... Loading... Done.\n","\n","G                             Params    OutputShape         WeightShape     \n","---                           ---       ---                 ---             \n","latents_in                    -         (?, 512)            -               \n","labels_in                     -         (?, 0)              -               \n","lod                           -         ()                  -               \n","dlatent_avg                   -         (512,)              -               \n","G_mapping/latents_in          -         (?, 512)            -               \n","G_mapping/labels_in           -         (?, 0)              -               \n","G_mapping/Normalize           -         (?, 512)            -               \n","G_mapping/Dense0              262656    (?, 512)            (512, 512)      \n","G_mapping/Dense1              262656    (?, 512)            (512, 512)      \n","G_mapping/Dense2              262656    (?, 512)            (512, 512)      \n","G_mapping/Dense3              262656    (?, 512)            (512, 512)      \n","G_mapping/Dense4              262656    (?, 512)            (512, 512)      \n","G_mapping/Dense5              262656    (?, 512)            (512, 512)      \n","G_mapping/Dense6              262656    (?, 512)            (512, 512)      \n","G_mapping/Dense7              262656    (?, 512)            (512, 512)      \n","G_mapping/Broadcast           -         (?, 14, 512)        -               \n","G_mapping/dlatents_out        -         (?, 14, 512)        -               \n","Truncation/Lerp               -         (?, 14, 512)        -               \n","G_synthesis/dlatents_in       -         (?, 14, 512)        -               \n","G_synthesis/4x4/Const         8192      (?, 512, 4, 4)      (1, 512, 4, 4)  \n","G_synthesis/4x4/Conv          2622465   (?, 512, 4, 4)      (3, 3, 512, 512)\n","G_synthesis/4x4/ToRGB         264195    (?, 3, 4, 4)        (1, 1, 512, 3)  \n","G_synthesis/8x8/Conv0_up      2622465   (?, 512, 8, 8)      (3, 3, 512, 512)\n","G_synthesis/8x8/Conv1         2622465   (?, 512, 8, 8)      (3, 3, 512, 512)\n","G_synthesis/8x8/Upsample      -         (?, 3, 8, 8)        -               \n","G_synthesis/8x8/ToRGB         264195    (?, 3, 8, 8)        (1, 1, 512, 3)  \n","G_synthesis/16x16/Conv0_up    2622465   (?, 512, 16, 16)    (3, 3, 512, 512)\n","G_synthesis/16x16/Conv1       2622465   (?, 512, 16, 16)    (3, 3, 512, 512)\n","G_synthesis/16x16/Upsample    -         (?, 3, 16, 16)      -               \n","G_synthesis/16x16/ToRGB       264195    (?, 3, 16, 16)      (1, 1, 512, 3)  \n","G_synthesis/32x32/Conv0_up    2622465   (?, 512, 32, 32)    (3, 3, 512, 512)\n","G_synthesis/32x32/Conv1       2622465   (?, 512, 32, 32)    (3, 3, 512, 512)\n","G_synthesis/32x32/Upsample    -         (?, 3, 32, 32)      -               \n","G_synthesis/32x32/ToRGB       264195    (?, 3, 32, 32)      (1, 1, 512, 3)  \n","G_synthesis/64x64/Conv0_up    2622465   (?, 512, 64, 64)    (3, 3, 512, 512)\n","G_synthesis/64x64/Conv1       2622465   (?, 512, 64, 64)    (3, 3, 512, 512)\n","G_synthesis/64x64/Upsample    -         (?, 3, 64, 64)      -               \n","G_synthesis/64x64/ToRGB       264195    (?, 3, 64, 64)      (1, 1, 512, 3)  \n","G_synthesis/128x128/Conv0_up  1442561   (?, 256, 128, 128)  (3, 3, 512, 256)\n","G_synthesis/128x128/Conv1     721409    (?, 256, 128, 128)  (3, 3, 256, 256)\n","G_synthesis/128x128/Upsample  -         (?, 3, 128, 128)    -               \n","G_synthesis/128x128/ToRGB     132099    (?, 3, 128, 128)    (1, 1, 256, 3)  \n","G_synthesis/256x256/Conv0_up  426369    (?, 128, 256, 256)  (3, 3, 256, 128)\n","G_synthesis/256x256/Conv1     213249    (?, 128, 256, 256)  (3, 3, 128, 128)\n","G_synthesis/256x256/Upsample  -         (?, 3, 256, 256)    -               \n","G_synthesis/256x256/ToRGB     66051     (?, 3, 256, 256)    (1, 1, 128, 3)  \n","G_synthesis/images_out        -         (?, 3, 256, 256)    -               \n","G_synthesis/noise0            -         (1, 1, 4, 4)        -               \n","G_synthesis/noise1            -         (1, 1, 8, 8)        -               \n","G_synthesis/noise2            -         (1, 1, 8, 8)        -               \n","G_synthesis/noise3            -         (1, 1, 16, 16)      -               \n","G_synthesis/noise4            -         (1, 1, 16, 16)      -               \n","G_synthesis/noise5            -         (1, 1, 32, 32)      -               \n","G_synthesis/noise6            -         (1, 1, 32, 32)      -               \n","G_synthesis/noise7            -         (1, 1, 64, 64)      -               \n","G_synthesis/noise8            -         (1, 1, 64, 64)      -               \n","G_synthesis/noise9            -         (1, 1, 128, 128)    -               \n","G_synthesis/noise10           -         (1, 1, 128, 128)    -               \n","G_synthesis/noise11           -         (1, 1, 256, 256)    -               \n","G_synthesis/noise12           -         (1, 1, 256, 256)    -               \n","images_out                    -         (?, 3, 256, 256)    -               \n","---                           ---       ---                 ---             \n","Total                         30034338                                      \n","\n","\n","D                    Params    OutputShape         WeightShape     \n","---                  ---       ---                 ---             \n","images_in            -         (?, 3, 256, 256)    -               \n","labels_in            -         (?, 0)              -               \n","256x256/FromRGB      512       (?, 128, 256, 256)  (1, 1, 3, 128)  \n","256x256/Conv0        147584    (?, 128, 256, 256)  (3, 3, 128, 128)\n","256x256/Conv1_down   295168    (?, 256, 128, 128)  (3, 3, 128, 256)\n","256x256/Skip         32768     (?, 256, 128, 128)  (1, 1, 128, 256)\n","128x128/Conv0        590080    (?, 256, 128, 128)  (3, 3, 256, 256)\n","128x128/Conv1_down   1180160   (?, 512, 64, 64)    (3, 3, 256, 512)\n","128x128/Skip         131072    (?, 512, 64, 64)    (1, 1, 256, 512)\n","64x64/Conv0          2359808   (?, 512, 64, 64)    (3, 3, 512, 512)\n","64x64/Conv1_down     2359808   (?, 512, 32, 32)    (3, 3, 512, 512)\n","64x64/Skip           262144    (?, 512, 32, 32)    (1, 1, 512, 512)\n","32x32/Conv0          2359808   (?, 512, 32, 32)    (3, 3, 512, 512)\n","32x32/Conv1_down     2359808   (?, 512, 16, 16)    (3, 3, 512, 512)\n","32x32/Skip           262144    (?, 512, 16, 16)    (1, 1, 512, 512)\n","16x16/Conv0          2359808   (?, 512, 16, 16)    (3, 3, 512, 512)\n","16x16/Conv1_down     2359808   (?, 512, 8, 8)      (3, 3, 512, 512)\n","16x16/Skip           262144    (?, 512, 8, 8)      (1, 1, 512, 512)\n","8x8/Conv0            2359808   (?, 512, 8, 8)      (3, 3, 512, 512)\n","8x8/Conv1_down       2359808   (?, 512, 4, 4)      (3, 3, 512, 512)\n","8x8/Skip             262144    (?, 512, 4, 4)      (1, 1, 512, 512)\n","4x4/MinibatchStddev  -         (?, 513, 4, 4)      -               \n","4x4/Conv             2364416   (?, 512, 4, 4)      (3, 3, 513, 512)\n","4x4/Dense0           4194816   (?, 512)            (8192, 512)     \n","Output               513       (?, 1)              (512, 1)        \n","scores_out           -         (?, 1)              -               \n","---                  ---       ---                 ---             \n","Total                28864129                                      \n","\n","Building TensorFlow graph...\n","Initializing logs...\n","Training for 100000 kimg...\n","\n","tick 0     kimg 15008.0  lod 0.00  minibatch 4    time 43s          sec/tick 42.6    sec/kimg 2660.93 maintenance 0.0    gpumem 6.1\n","tick 1     kimg 15016.0  lod 0.00  minibatch 4    time 2h 02m 57s   sec/tick 7268.0  sec/kimg 908.49  maintenance 66.6   gpumem 6.1\n","tick 2     kimg 15024.0  lod 0.00  minibatch 4    time 4h 05m 53s   sec/tick 7321.6  sec/kimg 915.21  maintenance 53.9   gpumem 6.1\n","tick 3     kimg 15032.0  lod 0.00  minibatch 4    time 6h 08m 26s   sec/tick 7299.4  sec/kimg 912.42  maintenance 54.1   gpumem 6.1\n"]}],"source":["# Copyright (c) 2019, NVIDIA Corporation. All rights reserved.\n","#\n","# This work is made available under the Nvidia Source Code License-NC.\n","# To view a copy of this license, visit\n","# https://nvlabs.github.io/stylegan2/license.html\n","\n","import argparse\n","import copy\n","import os\n","import sys\n","\n","import dnnlib\n","from dnnlib import EasyDict\n","\n","from metrics.metric_defaults import metric_defaults\n","\n","#----------------------------------------------------------------------------\n","\n","_valid_configs = [\n","    # Table 1\n","    'config-a', # Baseline StyleGAN\n","    'config-b', # + Weight demodulation\n","    'config-c', # + Lazy regularization\n","    'config-d', # + Path length regularization\n","    'config-e', # + No growing, new G \u0026 D arch.\n","    'config-f', # + Large networks (default)\n","\n","    # Table 2\n","    'config-e-Gorig-Dorig',   'config-e-Gorig-Dresnet',   'config-e-Gorig-Dskip',\n","    'config-e-Gresnet-Dorig', 'config-e-Gresnet-Dresnet', 'config-e-Gresnet-Dskip',\n","    'config-e-Gskip-Dorig',   'config-e-Gskip-Dresnet',   'config-e-Gskip-Dskip',\n","]\n","\n","#----------------------------------------------------------------------------\n","\n","train     = EasyDict(run_func_name='training.training_loop.training_loop') # Options for training loop.\n","G         = EasyDict(func_name='training.networks_stylegan2.G_main')       # Options for generator network.\n","D         = EasyDict(func_name='training.networks_stylegan2.D_stylegan2')  # Options for discriminator network.\n","G_opt     = EasyDict(beta1=0.0, beta2=0.99, epsilon=1e-8)                  # Options for generator optimizer.\n","D_opt     = EasyDict(beta1=0.0, beta2=0.99, epsilon=1e-8)                  # Options for discriminator optimizer.\n","G_loss    = EasyDict(func_name='training.loss.G_logistic_ns_pathreg')      # Options for generator loss.\n","D_loss    = EasyDict(func_name='training.loss.D_logistic_r1')              # Options for discriminator loss.\n","sched     = EasyDict()                                                     # Options for TrainingSchedule.\n","grid      = EasyDict(size='8k', layout='random')                           # Options for setup_snapshot_image_grid().\n","sc        = dnnlib.SubmitConfig()                                          # Options for dnnlib.submit_run().\n","tf_config = {'rnd.np_random_seed': 1000}                                   # Options for tflib.init_tf().\n","\n","train.data_dir = data_dir\n","train.total_kimg = total_kimg\n","train.resume_kimg = resume_kimg\n","train.resume_pkl = resume_pkl\n","train.mirror_augment = mirror_augment\n","train.image_snapshot_ticks = train.network_snapshot_ticks = 1\n","sched.G_lrate_base = sched.D_lrate_base = 0.002\n","sched.minibatch_size_base = 4\n","sched.minibatch_gpu_base = 4\n","D_loss.gamma = 10\n","metrics = [metric_defaults[x] for x in metrics]\n","desc = 'stylegan2'\n","\n","desc += '-' + dataset\n","dataset_args = EasyDict(tfrecord_dir=dataset)\n","\n","assert num_gpus in [1, 2, 4, 8]\n","sc.num_gpus = num_gpus\n","desc += '-%dgpu' % num_gpus\n","\n","assert config_id in _valid_configs\n","desc += '-' + config_id\n","\n","# Configs A-E: Shrink networks to match original StyleGAN.\n","if config_id != 'config-f':\n","    G.fmap_base = D.fmap_base = 8 \u003c\u003c 10\n","\n","# Config E: Set gamma to 100 and override G \u0026 D architecture.\n","if config_id.startswith('config-e'):\n","    D_loss.gamma = 100\n","    if 'Gorig'   in config_id: G.architecture = 'orig'\n","    if 'Gskip'   in config_id: G.architecture = 'skip' # (default)\n","    if 'Gresnet' in config_id: G.architecture = 'resnet'\n","    if 'Dorig'   in config_id: D.architecture = 'orig'\n","    if 'Dskip'   in config_id: D.architecture = 'skip'\n","    if 'Dresnet' in config_id: D.architecture = 'resnet' # (default)\n","\n","# Configs A-D: Enable progressive growing and switch to networks that support it.\n","if config_id in ['config-a', 'config-b', 'config-c', 'config-d']:\n","    sched.lod_initial_resolution = 8\n","    sched.G_lrate_base = sched.D_lrate_base = 0.001\n","    sched.G_lrate_dict = sched.D_lrate_dict = {128: 0.0015, 256: 0.002, 512: 0.003, 1024: 0.003}\n","    sched.minibatch_size_base = 4 # (default)\n","    sched.minibatch_size_dict = {8: 256, 16: 128, 32: 64, 64: 32}\n","    sched.minibatch_gpu_base = 4 # (default)\n","    sched.minibatch_gpu_dict = {8: 32, 16: 16, 32: 8, 64: 4}\n","    G.synthesis_func = 'G_synthesis_stylegan_revised'\n","    D.func_name = 'training.networks_stylegan2.D_stylegan'\n","\n","# Configs A-C: Disable path length regularization.\n","if config_id in ['config-a', 'config-b', 'config-c']:\n","    G_loss = EasyDict(func_name='training.loss.G_logistic_ns')\n","\n","# Configs A-B: Disable lazy regularization.\n","if config_id in ['config-a', 'config-b']:\n","    train.lazy_regularization = False\n","\n","# Config A: Switch to original StyleGAN networks.\n","if config_id == 'config-a':\n","    G = EasyDict(func_name='training.networks_stylegan.G_style')\n","    D = EasyDict(func_name='training.networks_stylegan.D_basic')\n","\n","if gamma is not None:\n","    D_loss.gamma = gamma\n","\n","sc.submit_target = dnnlib.SubmitTarget.LOCAL\n","sc.local.do_not_copy_source_files = True\n","\n","#----------------------------------------------------------------------------\n","\n","def main():\n","    kwargs = EasyDict(train)\n","    kwargs.update(G_args=G, D_args=D, G_opt_args=G_opt, D_opt_args=D_opt, G_loss_args=G_loss, D_loss_args=D_loss)\n","    kwargs.update(dataset_args=dataset_args, sched_args=sched, grid_args=grid, metric_arg_list=metrics, tf_config=tf_config)\n","    kwargs.submit_config = copy.deepcopy(sc)\n","    kwargs.submit_config.run_dir_root = result_dir\n","    kwargs.submit_config.run_desc = desc\n","    dnnlib.submit_run(**kwargs)\n","\n","#----------------------------------------------------------------------------\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n","#----------------------------------------------------------------------------"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uhDsQUrqEsOS"},"outputs":[],"source":[""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BXUDkriOzK6a"},"outputs":[],"source":[""]},{"cell_type":"markdown","metadata":{"id":"euy9uzUqf-8l"},"source":[""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oaYzsH_FglJi"},"outputs":[],"source":[""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rAAfvCApYLhS"},"outputs":[],"source":[""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nYEzpMddgkyf"},"outputs":[],"source":[""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vPv_vo7mKZxA"},"outputs":[],"source":[""]},{"cell_type":"markdown","metadata":{"id":"GrVVjxC8apvs"},"source":["### Additional Variants"]},{"cell_type":"markdown","metadata":{"id":"ZEbl-PAJPKZf"},"source":[""]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":445,"status":"ok","timestamp":1638917078665,"user":{"displayName":"Darya Trubarova","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gix-XlOVn3X94Sne9i_FVz1AA0qerxLRG_iBa-RBQ=s64","userId":"13773985099433224510"},"user_tz":-180},"id":"8ynCSdIcmke-","outputId":"2ccefd25-793c-437a-dbdb-09e6c255b3f7"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/stylegan2\n"]}],"source":["%cd /content/stylegan2/"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":53054,"status":"ok","timestamp":1638917165297,"user":{"displayName":"Darya Trubarova","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gix-XlOVn3X94Sne9i_FVz1AA0qerxLRG_iBa-RBQ=s64","userId":"13773985099433224510"},"user_tz":-180},"id":"ycVz1W0qPgrV","outputId":"8abe93f4-1c1f-4087-eaa8-439d979375a1"},"outputs":[{"name":"stdout","output_type":"stream","text":["Loading networks from \"/content/drive/MyDrive/StyleGAN2/saves/00029-stylegan2-datach-1gpu-config-f/network-snapshot-015032.pkl\"...\n","Setting up TensorFlow plugin \"fused_bias_act.cu\": Preprocessing... Compiling... Loading... Done.\n","Setting up TensorFlow plugin \"upfirdn_2d.cu\": Preprocessing... Compiling... Loading... Done.\n"]}],"source":["# Download the model of choice  \n","import argparse\n","import numpy as np\n","import PIL.Image\n","import dnnlib\n","import dnnlib.tflib as tflib\n","import re\n","import sys\n","from io import BytesIO\n","import IPython.display\n","import numpy as np\n","from math import ceil\n","from PIL import Image, ImageDraw\n","import imageio\n","\n","import pretrained_networks\n","\n","# Choose between these pretrained models - I think 'f' is the best choice:\n","\n","# 1024×1024 faces\n","# stylegan2-ffhq-config-a.pkl\n","# stylegan2-ffhq-config-b.pkl\n","# stylegan2-ffhq-config-c.pkl\n","# stylegan2-ffhq-config-d.pkl\n","# stylegan2-ffhq-config-e.pkl\n","# stylegan2-ffhq-config-f.pkl\n","\n","# 512×384 cars\n","# stylegan2-car-config-a.pkl\n","# stylegan2-car-config-b.pkl\n","# stylegan2-car-config-c.pkl\n","# stylegan2-car-config-d.pkl\n","# stylegan2-car-config-e.pkl\n","# stylegan2-car-config-f.pkl\n","\n","# 256x256 horses\n","# stylegan2-horse-config-a.pkl\n","# stylegan2-horse-config-f.pkl\n","\n","# 256x256 churches\n","# stylegan2-church-config-a.pkl\n","# stylegan2-church-config-f.pkl\n","\n","# 256x256 cats\n","# stylegan2-cat-config-f.pkl\n","# stylegan2-cat-config-a.pkl\n","#network_pkl = \"gdrive:networks/stylegan2-ffhq-config-f.pkl\"\n","\n","#network_pkl = \"/content/drive/MyDrive/StyleGAN2/saves/00021-stylegan2-theotherview-1gpu-config-f/network-snapshot-015800.pkl\"\n","\n","# If downloads fails, due to 'Google Drive download quota exceeded' you can try downloading manually from your own Google Drive account\n","network_pkl = \"/content/drive/MyDrive/StyleGAN2/saves/00029-stylegan2-datach-1gpu-config-f/network-snapshot-015032.pkl\"\n","\n","print('Loading networks from \"%s\"...' % network_pkl)\n","_G, _D, Gs = pretrained_networks.load_networks(network_pkl)\n","noise_vars = [var for name, var in Gs.components.synthesis.vars.items() if name.startswith('noise')]"]},{"cell_type":"markdown","metadata":{"id":"8LRQ5NaIa_gm"},"source":["## Part 4. Useful utility functions..."]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":977,"status":"ok","timestamp":1638917174314,"user":{"displayName":"Darya Trubarova","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gix-XlOVn3X94Sne9i_FVz1AA0qerxLRG_iBa-RBQ=s64","userId":"13773985099433224510"},"user_tz":-180},"id":"Zxbhe4uLvF_a"},"outputs":[],"source":["# Useful utility functions...\n","\n","# Generates a list of images, based on a list of latent vectors (Z), and a list (or a single constant) of truncation_psi's.\n","def generate_images_in_w_space(dlatents, truncation_psi):\n","    Gs_kwargs = dnnlib.EasyDict()\n","    Gs_kwargs.output_transform = dict(func=tflib.convert_images_to_uint8, nchw_to_nhwc=True)\n","    Gs_kwargs.randomize_noise = False\n","    Gs_kwargs.truncation_psi = truncation_psi\n","    dlatent_avg = Gs.get_var('dlatent_avg') # [component]\n","\n","    imgs = []\n","    for row, dlatent in log_progress(enumerate(dlatents), name = \"Generating images\"):\n","        #row_dlatents = (dlatent[np.newaxis] - dlatent_avg) * np.reshape(truncation_psi, [-1, 1, 1]) + dlatent_avg\n","        dl = (dlatent-dlatent_avg)*truncation_psi   + dlatent_avg\n","        row_images = Gs.components.synthesis.run(dlatent,  **Gs_kwargs)\n","        imgs.append(PIL.Image.fromarray(row_images[0], 'RGB'))\n","    return imgs       \n","\n","def generate_images(zs, truncation_psi):\n","    Gs_kwargs = dnnlib.EasyDict()\n","    Gs_kwargs.output_transform = dict(func=tflib.convert_images_to_uint8, nchw_to_nhwc=True)\n","    Gs_kwargs.randomize_noise = False\n","    if not isinstance(truncation_psi, list):\n","        truncation_psi = [truncation_psi] * len(zs)\n","        \n","    imgs = []\n","    for z_idx, z in log_progress(enumerate(zs), size = len(zs), name = \"Generating images\"):\n","        Gs_kwargs.truncation_psi = truncation_psi[z_idx]\n","        noise_rnd = np.random.RandomState(1) # fix noise\n","        tflib.set_vars({var: noise_rnd.randn(*var.shape.as_list()) for var in noise_vars}) # [height, width]\n","        images = Gs.run(z, None, **Gs_kwargs) # [minibatch, height, width, channel]\n","        imgs.append(PIL.Image.fromarray(images[0], 'RGB'))\n","    return imgs\n","\n","def generate_zs_from_seeds(seeds):\n","    zs = []\n","    for seed_idx, seed in enumerate(seeds):\n","        rnd = np.random.RandomState(seed)\n","        z = rnd.randn(1, *Gs.input_shape[1:]) # [minibatch, component]\n","        zs.append(z)\n","    return zs\n","\n","# Generates a list of images, based on a list of seed for latent vectors (Z), and a list (or a single constant) of truncation_psi's.\n","def generate_images_from_seeds(seeds, truncation_psi):\n","    return generate_images(generate_zs_from_seeds(seeds), truncation_psi)\n","\n","def saveImgs(imgs, location):\n","  for idx, img in log_progress(enumerate(imgs), size = len(imgs), name=\"Saving images\"):\n","    file = location+ str(idx) + \".png\"\n","    img.save(file)\n","\n","def imshow(a, format='png', jpeg_fallback=True):\n","  a = np.asarray(a, dtype=np.uint8)\n","  str_file = BytesIO()\n","  PIL.Image.fromarray(a).save(str_file, format)\n","  im_data = str_file.getvalue()\n","  try:\n","    disp = IPython.display.display(IPython.display.Image(im_data))\n","  except IOError:\n","    if jpeg_fallback and format != 'jpeg':\n","      print ('Warning: image was too large to display in format \"{}\"; '\n","             'trying jpeg instead.').format(format)\n","      return imshow(a, format='jpeg')\n","    else:\n","      raise\n","  return disp\n","\n","def showarray(a, fmt='png'):\n","    a = np.uint8(a)\n","    f = StringIO()\n","    PIL.Image.fromarray(a).save(f, fmt)\n","    IPython.display.display(IPython.display.Image(data=f.getvalue()))\n","\n","        \n","def clamp(x, minimum, maximum):\n","    return max(minimum, min(x, maximum))\n","    \n","def drawLatent(image,latents,x,y,x2,y2, color=(255,0,0,100)):\n","  buffer = PIL.Image.new('RGBA', image.size, (0,0,0,0))\n","   \n","  draw = ImageDraw.Draw(buffer)\n","  cy = (y+y2)/2\n","  draw.rectangle([x,y,x2,y2],fill=(255,255,255,180), outline=(0,0,0,180))\n","  for i in range(len(latents)):\n","    mx = x + (x2-x)*(float(i)/len(latents))\n","    h = (y2-y)*latents[i]*0.1\n","    h = clamp(h,cy-y2,y2-cy)\n","    draw.line((mx,cy,mx,cy+h),fill=color)\n","  return PIL.Image.alpha_composite(image,buffer)\n","             \n","  \n","def createImageGrid(images, scale=0.25, rows=1):\n","   w,h = images[0].size\n","   w = int(w*scale)\n","   h = int(h*scale)\n","   height = rows*h\n","   cols = ceil(len(images) / rows)\n","   width = cols*w\n","   canvas = PIL.Image.new('RGBA', (width,height), 'white')\n","   for i,img in enumerate(images):\n","     img = img.resize((w,h), PIL.Image.ANTIALIAS)\n","     canvas.paste(img, (w*(i % cols), h*(i // cols))) \n","   return canvas\n","\n","def convertZtoW(latent, truncation_psi=0.7, truncation_cutoff=9):\n","  dlatent = Gs.components.mapping.run(latent, None) # [seed, layer, component]\n","  dlatent_avg = Gs.get_var('dlatent_avg') # [component]\n","  for i in range(truncation_cutoff):\n","    dlatent[0][i] = (dlatent[0][i]-dlatent_avg)*truncation_psi + dlatent_avg\n","    \n","  return dlatent\n","\n","def interpolate(zs, steps):\n","   out = []\n","   for i in range(len(zs)-1):\n","    for index in range(steps):\n","     fraction = index/float(steps) \n","     out.append(zs[i+1]*fraction + zs[i]*(1-fraction))\n","   return out\n","\n","# Taken from https://github.com/alexanderkuk/log-progress\n","def log_progress(sequence, every=1, size=None, name='Items'):\n","    from ipywidgets import IntProgress, HTML, VBox\n","    from IPython.display import display\n","\n","    is_iterator = False\n","    if size is None:\n","        try:\n","            size = len(sequence)\n","        except TypeError:\n","            is_iterator = True\n","    if size is not None:\n","        if every is None:\n","            if size \u003c= 200:\n","                every = 1\n","            else:\n","                every = int(size / 200)     # every 0.5%\n","    else:\n","        assert every is not None, 'sequence is iterator, set every'\n","\n","    if is_iterator:\n","        progress = IntProgress(min=0, max=1, value=1)\n","        progress.bar_style = 'info'\n","    else:\n","        progress = IntProgress(min=0, max=size, value=0)\n","    label = HTML()\n","    box = VBox(children=[label, progress])\n","    display(box)\n","\n","    index = 0\n","    try:\n","        for index, record in enumerate(sequence, 1):\n","            if index == 1 or index % every == 0:\n","                if is_iterator:\n","                    label.value = '{name}: {index} / ?'.format(\n","                        name=name,\n","                        index=index\n","                    )\n","                else:\n","                    progress.value = index\n","                    label.value = u'{name}: {index} / {size}'.format(\n","                        name=name,\n","                        index=index,\n","                        size=size\n","                    )\n","            yield record\n","    except:\n","        progress.bar_style = 'danger'\n","        raise\n","    else:\n","        progress.bar_style = 'success'\n","        progress.value = index\n","        label.value = \"{name}: {index}\".format(\n","            name=name,\n","            index=str(index or '?')\n","        )\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"MaGjJAWHct-o"},"source":["### Generate random Image"]},{"cell_type":"code","execution_count":48,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":808,"output_embedded_package_id":"1V5WxVmn_wDXWNQn72G2ieFcwU7IfsVNW"},"executionInfo":{"elapsed":11683,"status":"ok","timestamp":1638918272428,"user":{"displayName":"Darya Trubarova","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gix-XlOVn3X94Sne9i_FVz1AA0qerxLRG_iBa-RBQ=s64","userId":"13773985099433224510"},"user_tz":-180},"id":"BQIhdSRcXC-Q","outputId":"246a3cba-2a64-4f40-bd9d-0046d3a4be8e"},"outputs":[],"source":["# generate some random seeds\n","seeds = np.random.randint(10000000, size=15)\n","print(seeds)\n","\n","# show the seeds\n","imshow(createImageGrid(generate_images_from_seeds(seeds, 0.7), 0.9 , 3))"]},{"cell_type":"markdown","metadata":{"id":"B_v51SJscxph"},"source":["### Perform Interpolation"]},{"cell_type":"code","execution_count":37,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":387,"output_embedded_package_id":"1khQgs07A5Dx69PPpk-27a79yNoPt2zDn"},"executionInfo":{"elapsed":6244,"status":"ok","timestamp":1638918011608,"user":{"displayName":"Darya Trubarova","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gix-XlOVn3X94Sne9i_FVz1AA0qerxLRG_iBa-RBQ=s64","userId":"13773985099433224510"},"user_tz":-180},"id":"_aZvophLZQOw","outputId":"e9bec329-d8c7-4cdc-8596-baed4e7e560c"},"outputs":[],"source":["# Simple (Z) interpolation\n","zs = generate_zs_from_seeds([3828708 , 2309216])\n","\n","latent1 = zs[0]\n","latent2 = zs[1]\n","\n","number_of_steps = 25\n","\n","imgs = generate_images(interpolate([latent1,latent2],number_of_steps), 1.0)\n","number_of_images = len(imgs)\n","imshow(createImageGrid(imgs, 0.4 , 3))"]},{"cell_type":"markdown","metadata":{"id":"CgEB4__8c1U8"},"source":["### Generate a Movie"]},{"cell_type":"code","execution_count":38,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":163},"executionInfo":{"elapsed":30129,"status":"ok","timestamp":1638918071769,"user":{"displayName":"Darya Trubarova","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gix-XlOVn3X94Sne9i_FVz1AA0qerxLRG_iBa-RBQ=s64","userId":"13773985099433224510"},"user_tz":-180},"id":"TwXUbkVJXckp","outputId":"fd7a8150-b94d-4d80-a63e-2898b333782f"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"621e07d0af154acb94c8f14f2fe91938","version_major":2,"version_minor":0},"text/plain":["VBox(children=(HTML(value=''), IntProgress(value=0, max=300)))"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["mkdir: cannot create directory ‘out’: File exists\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"05ae085e01b74e03a044d86543899a65","version_major":2,"version_minor":0},"text/plain":["VBox(children=(HTML(value=''), IntProgress(value=0, max=300)))"]},"metadata":{},"output_type":"display_data"}],"source":["# generating a MP4 movie\n","\n","zs = generate_zs_from_seeds([3828708,78166,838149,6538612 ,36875695,5378687,2309216])\n","\n","number_of_steps = 50\n","imgs = generate_images(interpolate(zs,number_of_steps), 1.0)\n","\n","# Example of reading a generated set of images, and storing as MP4.\n","%mkdir out\n","movieName = 'out/mov.mp4'\n","\n","with imageio.get_writer(movieName, mode='I') as writer:\n","    for image in log_progress(list(imgs), name = \"Creating animation\"):\n","        writer.append_data(np.array(image))"]},{"cell_type":"code","execution_count":39,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1638918073498,"user":{"displayName":"Darya Trubarova","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gix-XlOVn3X94Sne9i_FVz1AA0qerxLRG_iBa-RBQ=s64","userId":"13773985099433224510"},"user_tz":-180},"id":"Po7eQSxav8qj","outputId":"515085dd-e04b-4115-f116-25492a453377"},"outputs":[{"data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["\u003cIPython.core.display.Javascript object\u003e"]},"metadata":{},"output_type":"display_data"},{"data":{"application/javascript":["download(\"download_31ec787a-e597-4ce0-87da-b5418a916ee7\", \"mov.mp4\", 1146705)"],"text/plain":["\u003cIPython.core.display.Javascript object\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["# In order to download files, you can use the snippet below - this often fails for me, though, so I prefer the 'Files' browser in the sidepanel.\n","\n","from google.colab import files\n","files.download(movieName) \n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":162},"executionInfo":{"elapsed":20686,"status":"ok","timestamp":1605601265839,"user":{"displayName":"helena nikonole","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjCWkwRaNsve7N8jMkXkVoOz-tK6QCTEJVNCsNY1Q=s64","userId":"03378068824784113013"},"user_tz":-180},"id":"GofpNwi5aLl9","outputId":"d52df739-0468-47f5-aa15-c8f1ff3e8059"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"badc997aa02d408399f7cb41d840ddc8","version_major":2,"version_minor":0},"text/plain":["VBox(children=(HTML(value=''), IntProgress(value=1, bar_style='info', max=1)))"]},"metadata":{"tags":[]},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["mkdir: cannot create directory ‘out’: File exists\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"58d7b5618e9740d797fe9dade548f4ff","version_major":2,"version_minor":0},"text/plain":["VBox(children=(HTML(value=''), IntProgress(value=0, max=600)))"]},"metadata":{"tags":[]},"output_type":"display_data"}],"source":["# more complex example, interpolating in W instead of Z space.\n","zs = generate_zs_from_seeds([421645,6149575,3487643,3766864 ,3857159,5360657,3720613 ])\n","\n","# It seems my truncation_psi is slightly less efficient in W space - I probably introduced an error somewhere...\n","\n","dls = []\n","for z in zs:\n","  dls.append(convertZtoW(z ,truncation_psi=1.0))\n","\n","number_of_steps = 100\n","\n","imgs = generate_images_in_w_space(interpolate(dls,number_of_steps), 1.0)\n","\n","%mkdir out\n","movieName = 'out/mov.mp4'\n","\n","with imageio.get_writer(movieName, mode='I') as writer:\n","    for image in log_progress(list(imgs), name = \"Creating animation\"):\n","        writer.append_data(np.array(image))"]},{"cell_type":"markdown","metadata":{"id":"rYdsgv4i6YPl"},"source":["### Projecting images onto the generatable manifold\n","\n","StyleGAN2 comes with a projector that finds the closest generatable image based on any input image. This allows you to get a feeling for the diversity of the portrait manifold."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1070,"status":"ok","timestamp":1619111916449,"user":{"displayName":"helena nikonole","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjCWkwRaNsve7N8jMkXkVoOz-tK6QCTEJVNCsNY1Q=s64","userId":"03378068824784113013"},"user_tz":-180},"id":"urzy8lw76j_r","outputId":"6aba50f1-35c4-423f-ce9f-f2357e4df454"},"outputs":[{"name":"stdout","output_type":"stream","text":["mkdir: cannot create directory ‘projection’: File exists\n","mkdir: cannot create directory ‘projection/imgs’: File exists\n","mkdir: cannot create directory ‘projection/out’: File exists\n"]}],"source":["!mkdir projection\n","!mkdir projection/imgs\n","!mkdir projection/out\n","\n","# Now upload a single image to 'stylegan2/projection/imgs' (use the Files side panel). Image should be color PNG, with a size of 1024x1024."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":185781,"status":"ok","timestamp":1619112104603,"user":{"displayName":"helena nikonole","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjCWkwRaNsve7N8jMkXkVoOz-tK6QCTEJVNCsNY1Q=s64","userId":"03378068824784113013"},"user_tz":-180},"id":"IDLJBbpz6n4k","outputId":"715f6932-6d41-41e7-a613-6b39eec2088a"},"outputs":[{"name":"stdout","output_type":"stream","text":["Loading images from \"./projection/imgs/\"\n","Creating dataset \"./projection/records/\"\n","Added 1 images.\n","Downloading https://nvlabs-fi-cdn.nvidia.com/stylegan/networks/metrics/vgg16_zhang_perceptual.pkl ... done\n","Loading images from \"records\"...\n","Streaming data using training.dataset.TFRecordDataset...\n","WARNING: Entity \u003cfunction TFRecordDataset.parse_tfrecord_tf at 0x7f40393397a0\u003e could not be transformed and will be executed as-is. Please report this to the AutoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: module 'gast' has no attribute 'Num'\n","Dataset shape = [3, 256, 256]\n","Dynamic range = [0, 255]\n","Label size    = 0\n","Projecting image 0/1 ...\n"]}],"source":["# Convert uploaded images to TFRecords\n","import dataset_tool\n","from sys import exit\n","dataset_tool.create_from_images(\"./projection/records/\", \"./projection/imgs/\", True)\n","\n","# Run the projector\n","import run_projector\n","import projector\n","import training.dataset\n","import training.misc\n","import os \n","\n","def project_real_images(dataset_name, data_dir, num_images, num_snapshots):\n","    proj = projector.Projector()\n","    proj.set_network(Gs)\n","\n","    print('Loading images from \"%s\"...' % dataset_name)\n","    dataset_obj = training.dataset.load_dataset(data_dir=data_dir, tfrecord_dir=dataset_name, max_label_size=0, verbose=True, repeat=False, shuffle_mb=0)\n","    assert dataset_obj.shape == Gs.output_shape[1:]\n","\n","    for image_idx in range(num_images):\n","        print('Projecting image %d/%d ...' % (image_idx, num_images))\n","        images, _labels = dataset_obj.get_minibatch_np(1)\n","        images = training.misc.adjust_dynamic_range(images, [0, 255], [-1, 1])\n","        run_projector.project_image(proj, targets=images, png_prefix=dnnlib.make_run_dir_path('projection/out/image%04d-' % image_idx), num_snapshots=num_snapshots)\n","\n","project_real_images(\"records\",\"./projection\",1,100)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"executionInfo":{"elapsed":3274,"status":"ok","timestamp":1619112146755,"user":{"displayName":"helena nikonole","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjCWkwRaNsve7N8jMkXkVoOz-tK6QCTEJVNCsNY1Q=s64","userId":"03378068824784113013"},"user_tz":-180},"id":"OmjPpjFU6yq3","outputId":"f502f885-f63d-46f6-fc8c-9fe060535def"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"ed9b51d5fe5841cfacd7fd376dc2d51d","version_major":2,"version_minor":0},"text/plain":["VBox(children=(HTML(value=''), IntProgress(value=0)))"]},"metadata":{"tags":[]},"output_type":"display_data"}],"source":["# Create video \n","\n","import glob\n","\n","imgs = sorted(glob.glob(\"projection/out/*step*.png\"))\n","\n","target_imgs = sorted(glob.glob(\"projection/out/*target*.png\"))\n","assert len(target_imgs) == 1, \"More than one target found?\"\n","target_img = imageio.imread(target_imgs[0])\n","\n","movieName = \"projection/movie.mp4\"\n","with imageio.get_writer(movieName, mode='I') as writer:\n","    for filename in log_progress(imgs, name = \"Creating animation\"):\n","        image = imageio.imread(filename)\n","\n","        # Concatenate images with original target image\n","        w,h = image.shape[0:2]\n","        canvas = PIL.Image.new('RGBA', (w*2,h), 'white')\n","        canvas.paste(Image.fromarray(target_img), (0, 0))\n","        canvas.paste(Image.fromarray(image), (w, 0))\n","\n","        writer.append_data(np.array(canvas))  "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"executionInfo":{"elapsed":1234,"status":"ok","timestamp":1619112270328,"user":{"displayName":"helena nikonole","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjCWkwRaNsve7N8jMkXkVoOz-tK6QCTEJVNCsNY1Q=s64","userId":"03378068824784113013"},"user_tz":-180},"id":"bugS7hZ5fLR3","outputId":"5532a06d-840f-442d-fae8-f39abb561ce4"},"outputs":[{"data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["\u003cIPython.core.display.Javascript object\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"},{"data":{"application/javascript":["download(\"download_9bf32673-305f-4f4d-910d-dc1adc32c729\", \"movie.mp4\", 244751)"],"text/plain":["\u003cIPython.core.display.Javascript object\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"}],"source":["# In order to download files, you can use the snippet below - this often fails for me, though, so I prefer the 'Files' browser in the sidepanel.\n","\n","from google.colab import files\n","files.download(movieName) \n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XGVarLre63dL"},"outputs":[],"source":["# Now you can download the video (find it in the Files side panel under 'stylegan2/projection')\n","\n","# To cleanup\n","!rm projection/out/*.*\n","!rm projection/records/*.*\n","!rm projection/imgs/*.*"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["hIdRVncr81mT"],"machine_shape":"hm","name":"ch \"batch 4 StyleGAN2_Train + Generate.ipynb\"","provenance":[{"file_id":"1pa3sUH-B3W4Ao9ojdGv6OMPemDpiZyMY","timestamp":1638384964521},{"file_id":"1l7jQYrbFcQZsRfbHk12rXhgk_CpSrkit","timestamp":1605519761435},{"file_id":"1MTAyfYUm6_2QruVDf9RaH8edcyUdMpdi","timestamp":1592468272092},{"file_id":"1GjiIgkCw3G_l1EEX97B3ej1KcA00ceGv","timestamp":1592243434203},{"file_id":"1xckDTp9DFKd7GqL78nt8xZov_qpadZy8","timestamp":1592229234056},{"file_id":"1yrOzWSTgvsy7uhxXTQDyTvFkWlyK175K","timestamp":1590651303175}],"version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"widgets":{"application/vnd.jupyter.widget-state+json":{"05ae085e01b74e03a044d86543899a65":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"VBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"VBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"VBoxView","box_style":"","children":["IPY_MODEL_e48019461288471da4b491d181d4c71b","IPY_MODEL_4d7e0ce01dca415cbe53e0f91a32afde"],"layout":"IPY_MODEL_94407949cc4f4954a1516f1a48b33fee"}},"06b2618b179841cbb27d4ff20c1f7651":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"0c3e79d82c7447e088db11a19fb0f1c8":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"IntProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"IntProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_dc5049dbc7654685b05c165b590b6a3e","max":15,"min":0,"orientation":"horizontal","style":"IPY_MODEL_820fdca6e14d4c38b964b9fa887dd63b","value":15}},"0f167af59a2b43dbb5c5998b89cea1c5":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"180f5b10f20e49bf8108a5a26738f88d":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2506c2784275496cafcc30081a2afb80":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d7d7e38797044c8893886b780bd3b61a","placeholder":"​","style":"IPY_MODEL_9552ee05adcd40d785ddb90e947be093","value":"Generating images: 25"}},"27667a8d447c47089c19d89e8676217e":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"2cd39176ed3e42c4b299fad893096e54":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"352ec0326c9f45bc979fb9090e40da49":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"IntProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"IntProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_8bbbff223c354b5b9d2bb1132809b1ba","max":25,"min":0,"orientation":"horizontal","style":"IPY_MODEL_8e3a7bf0ac0b4b59be54d272a71b5fe3","value":25}},"3af4a12e3b834fbe9649b421f3f9e566":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f99f35070de242d5a3cf7a3bd7a86217","placeholder":"​","style":"IPY_MODEL_8a82f7a2f0304f2eb40ae0ae2f9346f8","value":"Generating images: 300"}},"3fbbe9deb9894831805e6e738e86e3f3":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_6c38ecaeb5304924a32d9b93ca03af97","placeholder":"​","style":"IPY_MODEL_2cd39176ed3e42c4b299fad893096e54","value":"Generating images: 15"}},"44d960a87f7d408fb7a962ffe59301be":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"4d7e0ce01dca415cbe53e0f91a32afde":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"IntProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"IntProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_861e32e0f61249e696e4501a231836ab","max":300,"min":0,"orientation":"horizontal","style":"IPY_MODEL_cc6166bfddd941a98b1699fc500d2cc7","value":300}},"58d7b5618e9740d797fe9dade548f4ff":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"VBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"VBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"VBoxView","box_style":"","children":["IPY_MODEL_d526fa11e8f847d3b098a2e3da701a58","IPY_MODEL_863daf0eca0844ee93d3c0ec8b84e202"],"layout":"IPY_MODEL_9e97b39bae824b518380f0bc7d555936"}},"5913a660c79b408c981ae858e83a806c":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5e50a3b044694400ab52da90ec1861d8":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"609522284ca0421680a4193fce17357e":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"621e07d0af154acb94c8f14f2fe91938":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"VBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"VBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"VBoxView","box_style":"","children":["IPY_MODEL_3af4a12e3b834fbe9649b421f3f9e566","IPY_MODEL_f582680e639c4508bc9a9c8f130bc31d"],"layout":"IPY_MODEL_ecf78771c3ab4421b2171cfb1ef33b1d"}},"6c38ecaeb5304924a32d9b93ca03af97":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"81d7d80b520b447a84bea6b90a2b2163":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"81ec70f6f9f242f090f4a738d7edcfdd":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"820fdca6e14d4c38b964b9fa887dd63b":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"8548e3d57cf44057b9bfc595ecbb3304":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b444d1f15cd84df48c15067f0b65d6f3","placeholder":"​","style":"IPY_MODEL_06b2618b179841cbb27d4ff20c1f7651","value":"Generating images: 600"}},"861e32e0f61249e696e4501a231836ab":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"863daf0eca0844ee93d3c0ec8b84e202":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"IntProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"IntProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_180f5b10f20e49bf8108a5a26738f88d","max":600,"min":0,"orientation":"horizontal","style":"IPY_MODEL_44d960a87f7d408fb7a962ffe59301be","value":600}},"8a82f7a2f0304f2eb40ae0ae2f9346f8":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"8bbbff223c354b5b9d2bb1132809b1ba":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8e3a7bf0ac0b4b59be54d272a71b5fe3":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"94407949cc4f4954a1516f1a48b33fee":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9552ee05adcd40d785ddb90e947be093":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"9e5347862c6145cb8abc082db3c36860":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"9e97b39bae824b518380f0bc7d555936":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a328dbbc829f49dc9d8e72e17f17f037":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"VBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"VBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"VBoxView","box_style":"","children":["IPY_MODEL_3fbbe9deb9894831805e6e738e86e3f3","IPY_MODEL_0c3e79d82c7447e088db11a19fb0f1c8"],"layout":"IPY_MODEL_cf7918cb581148338d5fe852764f3dcc"}},"a8c035b2e8264bc0904efabce6d9ded5":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ad03f24f85b3470dbb4eb5ebbb0770aa":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"VBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"VBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"VBoxView","box_style":"","children":["IPY_MODEL_2506c2784275496cafcc30081a2afb80","IPY_MODEL_352ec0326c9f45bc979fb9090e40da49"],"layout":"IPY_MODEL_f019de0e945b4c82add3ed65f5d3a75a"}},"b444d1f15cd84df48c15067f0b65d6f3":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"badc997aa02d408399f7cb41d840ddc8":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"VBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"VBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"VBoxView","box_style":"","children":["IPY_MODEL_8548e3d57cf44057b9bfc595ecbb3304","IPY_MODEL_c39491d6062b4e839d1a634b4b5fae18"],"layout":"IPY_MODEL_a8c035b2e8264bc0904efabce6d9ded5"}},"c1858da55b064c0b89a2ad8a83d20ebb":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"c39491d6062b4e839d1a634b4b5fae18":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"IntProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"IntProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_81ec70f6f9f242f090f4a738d7edcfdd","max":1,"min":0,"orientation":"horizontal","style":"IPY_MODEL_fce8a40186504c8f8a8820fde2efa5ac","value":1}},"c82726218ac84272b9ca1021e9804ddc":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"IntProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"IntProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_0f167af59a2b43dbb5c5998b89cea1c5","max":100,"min":0,"orientation":"horizontal","style":"IPY_MODEL_27667a8d447c47089c19d89e8676217e","value":100}},"cc6166bfddd941a98b1699fc500d2cc7":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"cf7918cb581148338d5fe852764f3dcc":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d526fa11e8f847d3b098a2e3da701a58":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_609522284ca0421680a4193fce17357e","placeholder":"​","style":"IPY_MODEL_dabcce263ef041a0a8fb73c6c9f86377","value":"Creating animation: 600"}},"d7d7e38797044c8893886b780bd3b61a":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"dabcce263ef041a0a8fb73c6c9f86377":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"dc5049dbc7654685b05c165b590b6a3e":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e48019461288471da4b491d181d4c71b":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_fa89b10ce42b42899bb9273c521b5cd5","placeholder":"​","style":"IPY_MODEL_5e50a3b044694400ab52da90ec1861d8","value":"Creating animation: 300"}},"e92206551ed4405ba54f644391c28476":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ecf78771c3ab4421b2171cfb1ef33b1d":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ed9b51d5fe5841cfacd7fd376dc2d51d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"VBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"VBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"VBoxView","box_style":"","children":["IPY_MODEL_ed9deb1e320243edaaea5f0ed01fa140","IPY_MODEL_c82726218ac84272b9ca1021e9804ddc"],"layout":"IPY_MODEL_e92206551ed4405ba54f644391c28476"}},"ed9deb1e320243edaaea5f0ed01fa140":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_81d7d80b520b447a84bea6b90a2b2163","placeholder":"​","style":"IPY_MODEL_9e5347862c6145cb8abc082db3c36860","value":"Creating animation: 100"}},"f019de0e945b4c82add3ed65f5d3a75a":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f582680e639c4508bc9a9c8f130bc31d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"IntProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"IntProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_5913a660c79b408c981ae858e83a806c","max":300,"min":0,"orientation":"horizontal","style":"IPY_MODEL_c1858da55b064c0b89a2ad8a83d20ebb","value":300}},"f99f35070de242d5a3cf7a3bd7a86217":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"fa89b10ce42b42899bb9273c521b5cd5":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"fce8a40186504c8f8a8820fde2efa5ac":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}}}}},"nbformat":4,"nbformat_minor":0}